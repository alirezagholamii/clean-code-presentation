/*
Three Principles for Clean Code

1.The right tool for the job.
    Boundaries Matter
     ğŸ”… HTML in JS string ğŸ”´
     ğŸ”… JS in HTML ğŸ”´

     Stay Native - Advantage:
     âœ… Cached
     âœ… Code colored
     âœ… Syntax checked
     âœ… Separation of concerns
     âœ… Reusable
     âœ… Avoids string parsing
     âœ… Can minify & obfuscate


2.Maximize Signal to Noise Ratio
    Signal:
    logic that follows the TED rule:
     âœ… Terse 
     âœ… Expressive 
     âœ… Do one thing 
    
     Noise:
     ğŸ™‰ Repetition
     ğŸ™‰ Huge classes
     ğŸ™‰ Unnecessary comments
     ğŸ™‰ Poorly named structures
     ğŸ™‰ Long methods
     ğŸ™‰ Overly verbose
     ğŸ™‰ No whitespace
     ğŸ™‰ Zombie code

    ğŸ§  Our brain is the compiler

    ğŸ—¿ğŸ—¿ğŸ—¿ Don't repeat yourself


3.Self-documenting Code
    Understanding the original programmer's intent is the most
    difficult problem.

    Well written code is self-documenting.
    
     âœ… Clear intent
     âœ… Layers of abstractions
     âœ… Format for readabilty
     âœ… Favor code over comments



*/